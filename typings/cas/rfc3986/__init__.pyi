"""
This type stub file was generated by pyright.
"""

from . import exceptions, misc, normalizers

"""Module containing the validation logic for rfc3986."""
class Validator:
    """Object used to configure validation of all objects in rfc3986.

    .. versionadded:: 1.0

    Example usage::

         >>> from rfc3986 import api, validators
         >>> uri = api.uri_reference('https://github.com/')
         >>> validator = validators.Validator().require_presence_of(
         ...    'scheme', 'host', 'path',
         ... ).allow_schemes(
         ...    'http', 'https',
         ... ).allow_hosts(
         ...    '127.0.0.1', 'github.com',
         ... )
         >>> validator.validate(uri)
         >>> invalid_uri = rfc3986.uri_reference('imap://mail.google.com')
         >>> validator.validate(invalid_uri)
         Traceback (most recent call last):
         ...
         rfc3986.exceptions.MissingComponentError: ('path was required but
         missing', URIReference(scheme=u'imap', authority=u'mail.google.com',
         path=None, query=None, fragment=None), ['path'])

    """
    COMPONENT_NAMES = ...
    def __init__(self) -> None:
        """Initialize our default validations."""
        ...
    
    def allow_schemes(self, *schemes): # -> Self@Validator:
        """Require the scheme to be one of the provided schemes.

        .. versionadded:: 1.0

        :param schemes:
            Schemes, without ``://`` that are allowed.
        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def allow_hosts(self, *hosts): # -> Self@Validator:
        """Require the host to be one of the provided hosts.

        .. versionadded:: 1.0

        :param hosts:
            Hosts that are allowed.
        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def allow_ports(self, *ports): # -> Self@Validator:
        """Require the port to be one of the provided ports.

        .. versionadded:: 1.0

        :param ports:
            Ports that are allowed.
        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def allow_use_of_password(self): # -> Self@Validator:
        """Allow passwords to be present in the URI.

        .. versionadded:: 1.0

        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def forbid_use_of_password(self): # -> Self@Validator:
        """Prevent passwords from being included in the URI.

        .. versionadded:: 1.0

        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def check_validity_of(self, *components): # -> Self@Validator:
        """Check the validity of the components provided.

        This can be specified repeatedly.

        .. versionadded:: 1.1

        :param components:
            Names of components from :attr:`Validator.COMPONENT_NAMES`.
        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def require_presence_of(self, *components): # -> Self@Validator:
        """Require the components provided.

        This can be specified repeatedly.

        .. versionadded:: 1.0

        :param components:
            Names of components from :attr:`Validator.COMPONENT_NAMES`.
        :returns:
            The validator instance.
        :rtype:
            Validator
        """
        ...
    
    def validate(self, uri): # -> None:
        """Check a URI for conditions specified on this validator.

        .. versionadded:: 1.0

        :param uri:
            Parsed URI to validate.
        :type uri:
            rfc3986.uri.URIReference
        :raises MissingComponentError:
            When a required component is missing.
        :raises UnpermittedComponentError:
            When a component is not one of those allowed.
        :raises PasswordForbidden:
            When a password is present in the userinfo component but is
            not permitted by configuration.
        :raises InvalidComponentsError:
            When a component was found to be invalid.
        """
        ...
    


def check_password(uri): # -> None:
    """Assert that there is no password present in the uri."""
    ...

def ensure_one_of(allowed_values, uri, attribute): # -> None:
    """Assert that the uri's attribute is one of the allowed values."""
    ...

def ensure_required_components_exist(uri, required_components): # -> None:
    """Assert that all required components are present in the URI."""
    ...

def is_valid(value, matcher, require): # -> bool:
    """Determine if a value is valid based on the provided matcher.

    :param str value:
        Value to validate.
    :param matcher:
        Compiled regular expression to use to validate the value.
    :param require:
        Whether or not the value is required.
    """
    ...

def authority_is_valid(authority, host=..., require=...): # -> bool | Match[str] | None:
    """Determine if the authority string is valid.

    :param str authority:
        The authority to validate.
    :param str host:
        (optional) The host portion of the authority to validate.
    :param bool require:
        (optional) Specify if authority must not be None.
    :returns:
        ``True`` if valid, ``False`` otherwise
    :rtype:
        bool
    """
    ...

def host_is_valid(host, require=...): # -> bool | Match[str] | None:
    """Determine if the host string is valid.

    :param str host:
        The host to validate.
    :param bool require:
        (optional) Specify if host must not be None.
    :returns:
        ``True`` if valid, ``False`` otherwise
    :rtype:
        bool
    """
    ...

def scheme_is_valid(scheme, require=...): # -> Match[str] | bool | None:
    """Determine if the scheme is valid.

    :param str scheme:
        The scheme string to validate.
    :param bool require:
        (optional) Set to ``True`` to require the presence of a scheme.
    :returns:
        ``True`` if the scheme is valid. ``False`` otherwise.
    :rtype:
        bool
    """
    ...

def path_is_valid(path, require=...): # -> Match[str] | bool | None:
    """Determine if the path component is valid.

    :param str path:
        The path string to validate.
    :param bool require:
        (optional) Set to ``True`` to require the presence of a path.
    :returns:
        ``True`` if the path is valid. ``False`` otherwise.
    :rtype:
        bool
    """
    ...

def query_is_valid(query, require=...): # -> Match[str] | bool | None:
    """Determine if the query component is valid.

    :param str query:
        The query string to validate.
    :param bool require:
        (optional) Set to ``True`` to require the presence of a query.
    :returns:
        ``True`` if the query is valid. ``False`` otherwise.
    :rtype:
        bool
    """
    ...

def fragment_is_valid(fragment, require=...): # -> Match[str] | bool | None:
    """Determine if the fragment component is valid.

    :param str fragment:
        The fragment string to validate.
    :param bool require:
        (optional) Set to ``True`` to require the presence of a fragment.
    :returns:
        ``True`` if the fragment is valid. ``False`` otherwise.
    :rtype:
        bool
    """
    ...

def valid_ipv4_host_address(host): # -> bool:
    """Determine if the given host is a valid IPv4 address."""
    ...

_COMPONENT_VALIDATORS = ...
_SUBAUTHORITY_VALIDATORS = ...
def subauthority_component_is_valid(uri, component): # -> bool | Match[str] | None:
    """Determine if the userinfo, host, and port are valid."""
    ...

def ensure_components_are_valid(uri, validated_components): # -> None:
    """Assert that all components are valid in the URI."""
    ...

