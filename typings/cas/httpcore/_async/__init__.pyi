"""
This type stub file was generated by pyright.
"""

import ssl
import typing
from socksio import socks5
from .._exceptions import ConnectionNotAvailable, ProxyError
from .._models import Origin, Request, Response, URL, enforce_bytes, enforce_url
from .._ssl import default_ssl_context
from .._synchronization import AsyncLock
from .._trace import Trace
from ..backends.auto import AutoBackend
from ..backends.base import AsyncNetworkBackend, AsyncNetworkStream
from .connection_pool import AsyncConnectionPool
from .http11 import AsyncHTTP11Connection
from .interfaces import AsyncConnectionInterface

AUTH_METHODS = ...
REPLY_CODES = ...
class AsyncSOCKSProxy(AsyncConnectionPool):
    """
    A connection pool that sends requests via an HTTP proxy.
    """
    def __init__(self, proxy_url: typing.Union[URL, bytes, str], proxy_auth: typing.Optional[typing.Tuple[typing.Union[bytes, str], typing.Union[bytes, str]]] = ..., ssl_context: typing.Optional[ssl.SSLContext] = ..., max_connections: typing.Optional[int] = ..., max_keepalive_connections: typing.Optional[int] = ..., keepalive_expiry: typing.Optional[float] = ..., http1: bool = ..., http2: bool = ..., network_backend: typing.Optional[AsyncNetworkBackend] = ...) -> None:
        """
        A connection pool for making HTTP requests.

        Parameters:
            proxy_url: The URL to use when connecting to the proxy server.
                For example `"http://127.0.0.1:8080/"`.
            ssl_context: An SSL context to use for verifying connections.
                If not specified, the default `httpcore.default_ssl_context()`
                will be used.
            max_connections: The maximum number of concurrent HTTP connections that
                the pool should allow. Any attempt to send a request on a pool that
                would exceed this amount will block until a connection is available.
            max_keepalive_connections: The maximum number of idle HTTP connections
                that will be maintained in the pool.
            keepalive_expiry: The duration in seconds that an idle HTTP connection
                may be maintained for before being expired from the pool.
            http1: A boolean indicating if HTTP/1.1 requests should be supported
                by the connection pool. Defaults to True.
            http2: A boolean indicating if HTTP/2 requests should be supported by
                the connection pool. Defaults to False.
            retries: The maximum number of retries when trying to establish
                a connection.
            local_address: Local address to connect from. Can also be used to
                connect using a particular address family. Using
                `local_address="0.0.0.0"` will connect using an `AF_INET` address
                (IPv4), while using `local_address="::"` will connect using an
                `AF_INET6` address (IPv6).
            uds: Path to a Unix Domain Socket to use instead of TCP sockets.
            network_backend: A backend instance to use for handling network I/O.
        """
        ...
    
    def create_connection(self, origin: Origin) -> AsyncConnectionInterface:
        ...
    


class AsyncSocks5Connection(AsyncConnectionInterface):
    def __init__(self, proxy_origin: Origin, remote_origin: Origin, proxy_auth: typing.Optional[typing.Tuple[bytes, bytes]] = ..., ssl_context: typing.Optional[ssl.SSLContext] = ..., keepalive_expiry: typing.Optional[float] = ..., http1: bool = ..., http2: bool = ..., network_backend: typing.Optional[AsyncNetworkBackend] = ...) -> None:
        ...
    
    async def handle_async_request(self, request: Request) -> Response:
        ...
    
    def can_handle_request(self, origin: Origin) -> bool:
        ...
    
    async def aclose(self) -> None:
        ...
    
    def is_available(self) -> bool:
        ...
    
    def has_expired(self) -> bool:
        ...
    
    def is_idle(self) -> bool:
        ...
    
    def is_closed(self) -> bool:
        ...
    
    def info(self) -> str:
        ...
    
    def __repr__(self) -> str:
        ...
    


