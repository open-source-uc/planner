"""
This type stub file was generated by pyright.
"""

import datetime
import logging
import requests
from uuid import uuid4
from lxml import etree
from six.moves.urllib import parse as urllib_parse

logger = ...
class CASError(ValueError):
    """CASError type"""
    ...


class SingleLogoutMixin:
    @classmethod
    def get_saml_slos(cls, logout_request): # -> None:
        """returns SAML logout ticket info"""
        ...
    
    @classmethod
    def verify_logout_request(cls, logout_request, ticket): # -> bool:
        """Verify the single logout request came from the CAS server

        Args:
            cls (Class)
            logout_request (Request)
            ticket (str)

        Returns:
            bool: True if the logout_request is valid, False otherwise
        """
        ...
    


class CASClient:
    def __new__(self, *args, **kwargs): # -> CASClientV1 | CASClientV2 | CASClientV3 | CASClientWithSAMLV1:
        ...
    


class CASClientBase:
    logout_redirect_param_name = ...
    def __init__(self, service_url=..., server_url=..., extra_login_params=..., renew=..., username_attribute=..., verify_ssl_certificate=..., session=...) -> None:
        ...
    
    def verify_ticket(self, ticket):
        """Verify ticket.

        Sub-class must implement this function.
        Must return a triple

        Returns:
            triple: user, attributes, pgtiou
        """
        ...
    
    def get_login_url(self): # -> str:
        """Generates CAS login URL

        Returns:
            str: Login URL
        """
        ...
    
    def get_logout_url(self, redirect_url=...): # -> str:
        """Generates CAS logout URL

        Returns:
            str: Logout URL
        """
        ...
    
    def get_proxy_url(self, pgt): # -> str:
        """Returns proxy url, given the proxy granting ticket

        Returns:
            str: Proxy URL
        """
        ...
    
    def get_proxy_ticket(self, pgt):
        """Get proxy ticket given the proxy granting ticket

        Returns:
            str: Proxy ticket.

        Raises:
            CASError: Non 200 http code or bad XML body.
        """
        ...
    


class CASClientV1(CASClientBase):
    """CAS Client Version 1"""
    logout_redirect_param_name = ...
    def verify_ticket(self, ticket): # -> tuple[Any, None, None] | tuple[None, None, None]:
        """Verifies CAS 1.0 authentication ticket.

        Returns username on success and None on failure.
        """
        ...
    


class CASClientV2(CASClientBase):
    """CAS Client Version 2"""
    url_suffix = ...
    logout_redirect_param_name = ...
    def __init__(self, proxy_callback=..., *args, **kwargs) -> None:
        """proxy_callback is for V2 and V3 so V3 is subclass of V2"""
        ...
    
    def verify_ticket(self, ticket): # -> tuple[str | Unknown | None, dict[Unknown, Unknown] | None, str | Unknown | None]:
        """Verifies CAS 2.0+/3.0+ XML-based authentication ticket and returns extended attributes"""
        ...
    
    def get_verification_response(self, ticket): # -> bytes:
        ...
    
    @classmethod
    def parse_attributes_xml_element(cls, element): # -> dict[Unknown, Unknown]:
        ...
    
    @classmethod
    def verify_response(cls, response): # -> tuple[str | Unknown | None, dict[Unknown, Unknown] | None, str | Unknown | None]:
        ...
    
    @classmethod
    def parse_response_xml(cls, response): # -> tuple[str | Unknown | None, dict[Unknown, Unknown], str | Unknown | None]:
        ...
    


class CASClientV3(CASClientV2, SingleLogoutMixin):
    """CAS Client Version 3"""
    url_suffix = ...
    logout_redirect_param_name = ...
    @classmethod
    def parse_attributes_xml_element(cls, element): # -> dict[Unknown, Unknown]:
        ...
    
    @classmethod
    def verify_response(cls, response): # -> tuple[str | Unknown | None, dict[Unknown, Unknown], str | Unknown | None]:
        ...
    


SAML_1_0_NS = ...
SAML_1_0_PROTOCOL_NS = ...
SAML_1_0_ASSERTION_NS = ...
SAML_ASSERTION_TEMPLATE = ...
class CASClientWithSAMLV1(CASClientV2, SingleLogoutMixin):
    """CASClient 3.0+ with SAML"""
    def verify_ticket(self, ticket, **kwargs): # -> tuple[str | Unknown | None, dict[Unknown, Unknown], None]:
        """Verifies CAS 3.0+ XML-based authentication ticket and returns extended attributes.

        @date: 2011-11-30
        @author: Carlos Gonzalez Vila <carlewis@gmail.com>

        Returns username and attributes on success and None,None on failure.
        """
        ...
    
    def fetch_saml_validation(self, ticket): # -> Response:
        """We do the SAML validation"""
        ...
    
    @classmethod
    def get_saml_assertion(cls, ticket): # -> bytes:
        """Get SAML assertion

        SAML request values:

        - **RequestID** [REQUIRED]: unique identifier for the request
        - **IssueInstant** [REQUIRED]: timestamp of the request
        - **samlp:AssertionArtifact** [REQUIRED]: the valid CAS Service Ticket
          obtained as a response parameter at login.

        Example of `/samlValidate` POST request::

            POST /cas/samlValidate?TARGET=
            Host: cas.example.com
            Content-Length: 491
            Content-Type: text/xml

            <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
                <SOAP-ENV:Header/>
                <SOAP-ENV:Body>
                    <samlp:Request xmlns:samlp="urn:oasis:names:tc:SAML:1.0:protocol"
                                   MajorVersion="1"
                                   MinorVersion="1"
                                   RequestID="_192.168.16.51.1024506224022"
                                   IssueInstant="2002-06-19T17:03:44.022Z">
                        <samlp:AssertionArtifact>
                          ST-1-u4hrm3td92cLxpCvrjylcas.example.com
                        </samlp:AssertionArtifact>
                    </samlp:Request>
                </SOAP-ENV:Body>
            </SOAP-ENV:Envelope>

        see https://djangocas.dev/docs/4.0/CAS-Protocol-Specification.html#samlvalidate-cas-3-0
        """
        ...
    


