"""
This type stub file was generated by pyright.
"""

import binascii
import io
import os
import typing
from pathlib import Path
from ._types import AsyncByteStream, FileContent, FileTypes, RequestData, RequestFiles, SyncByteStream
from ._utils import format_form_param, guess_content_type, peek_filelike_length, primitive_value_to_str, to_bytes

def get_multipart_boundary_from_content_type(content_type: typing.Optional[bytes]) -> typing.Optional[bytes]:
    ...

class DataField:
    """
    A single form field item, within a multipart form field.
    """
    def __init__(self, name: str, value: typing.Union[str, bytes, int, float, None]) -> None:
        ...
    
    def render_headers(self) -> bytes:
        ...
    
    def render_data(self) -> bytes:
        ...
    
    def get_length(self) -> int:
        ...
    
    def render(self) -> typing.Iterator[bytes]:
        ...
    


class FileField:
    """
    A single file field item, within a multipart form field.
    """
    CHUNK_SIZE = ...
    def __init__(self, name: str, value: FileTypes) -> None:
        ...
    
    def get_length(self) -> int:
        ...
    
    def render_headers(self) -> bytes:
        ...
    
    def render_data(self) -> typing.Iterator[bytes]:
        ...
    
    def render(self) -> typing.Iterator[bytes]:
        ...
    


class MultipartStream(SyncByteStream, AsyncByteStream):
    """
    Request content as streaming multipart encoded form data.
    """
    def __init__(self, data: RequestData, files: RequestFiles, boundary: typing.Optional[bytes] = ...) -> None:
        ...
    
    def iter_chunks(self) -> typing.Iterator[bytes]:
        ...
    
    def iter_chunks_lengths(self) -> typing.Iterator[int]:
        ...
    
    def get_content_length(self) -> int:
        ...
    
    def get_headers(self) -> typing.Dict[str, str]:
        ...
    
    def __iter__(self) -> typing.Iterator[bytes]:
        ...
    
    async def __aiter__(self) -> typing.AsyncIterator[bytes]:
        ...
    


