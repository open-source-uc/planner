"""
This type stub file was generated by pyright.
"""

import os
import sys
import json
import shutil
import logging
import traceback
from pathlib import Path
from abc import ABC, abstractmethod
from contextvars import ContextVar
from typing import Any, Dict, Generic, Optional, Type, cast
from jinja2 import Environment, FileSystemLoader
from pydantic import BaseModel, ValidationError
from . import jsonrpc
from .jsonrpc import Manifest
from .models import DefaultData, PythonData
from .types import PartialModelFields
from .utils import copy_tree, is_same_path, resolve_template_path
from .errors import PartialTypeGeneratorError
from .. import __version__
from ..utils import DEBUG, DEBUG_GENERATOR
from .._compat import cached_property
from .._types import BaseModelT, InheritsGeneric, get_args

__all__ = ('BASE_PACKAGE_DIR', 'GenericGenerator', 'BaseGenerator', 'Generator', 'render_template', 'cleanup_templates', 'partial_models_ctx')
log: logging.Logger = ...
BASE_PACKAGE_DIR = ...
GENERIC_GENERATOR_NAME = ...
DEFERRED_TEMPLATES = ...
DEFAULT_ENV = ...
partial_models_ctx: ContextVar[Dict[str, PartialModelFields]] = ...
class GenericGenerator(ABC, Generic[BaseModelT]):
    @abstractmethod
    def get_manifest(self) -> Manifest:
        """Get the metadata for this generator

        This is used by prisma to display the post-generate message e.g.

        âœ” Generated Prisma Client Python to ./.venv/lib/python3.9/site-packages/prisma
        """
        ...
    
    @abstractmethod
    def generate(self, data: BaseModelT) -> None:
        ...
    
    @classmethod
    def invoke(cls) -> None:
        """Shorthand for calling BaseGenerator().run()"""
        ...
    
    def run(self) -> None:
        """Run the generation loop

        This can only be called from a prisma generation, e.g.

        ```prisma
        generator client {
            provider = "python generator.py"
        }
        ```
        """
        ...
    
    @cached_property
    def data_class(self) -> Type[BaseModelT]:
        """Return the BaseModel used to parse the Prisma DMMF"""
        ...
    


class BaseGenerator(GenericGenerator[DefaultData]):
    ...


class Generator(GenericGenerator[PythonData]):
    def __init_subclass__(cls, *args: Any, **kwargs: Any) -> None:
        ...
    
    def get_manifest(self) -> Manifest:
        ...
    
    def generate(self, data: PythonData) -> None:
        ...
    


def cleanup_templates(rootdir: Path, *, env: Optional[Environment] = ...) -> None:
    """Revert module to pre-generation state"""
    ...

def render_template(rootdir: Path, name: str, params: Dict[str, Any], *, env: Optional[Environment] = ...) -> None:
    ...

