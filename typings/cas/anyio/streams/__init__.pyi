"""
This type stub file was generated by pyright.
"""

from collections import OrderedDict, deque
from dataclasses import dataclass, field
from types import TracebackType
from typing import Deque, Generic, List, NamedTuple, Optional, Type, TypeVar
from .. import BrokenResourceError, ClosedResourceError, EndOfStream, WouldBlock, get_cancelled_exc_class
from .._core._compat import DeprecatedAwaitable
from ..abc import Event, ObjectReceiveStream, ObjectSendStream
from ..lowlevel import checkpoint

T_Item = TypeVar("T_Item")
class MemoryObjectStreamStatistics(NamedTuple):
    current_buffer_used: int
    max_buffer_size: float
    open_send_streams: int
    open_receive_streams: int
    tasks_waiting_send: int
    tasks_waiting_receive: int
    ...


@dataclass(eq=False)
class MemoryObjectStreamState(Generic[T_Item]):
    max_buffer_size: float = ...
    buffer: Deque[T_Item] = ...
    open_send_channels: int = ...
    open_receive_channels: int = ...
    waiting_receivers: OrderedDict[Event, List[T_Item]] = ...
    waiting_senders: OrderedDict[Event, T_Item] = ...
    def statistics(self) -> MemoryObjectStreamStatistics:
        ...
    


@dataclass(eq=False)
class MemoryObjectReceiveStream(Generic[T_Item], ObjectReceiveStream[T_Item]):
    _state: MemoryObjectStreamState[T_Item]
    _closed: bool = ...
    def __post_init__(self) -> None:
        ...
    
    def receive_nowait(self) -> T_Item:
        """
        Receive the next item if it can be done without waiting.

        :return: the received item
        :raises ~anyio.ClosedResourceError: if this send stream has been closed
        :raises ~anyio.EndOfStream: if the buffer is empty and this stream has been
            closed from the sending end
        :raises ~anyio.WouldBlock: if there are no items in the buffer and no tasks
            waiting to send

        """
        ...
    
    async def receive(self) -> T_Item:
        ...
    
    def clone(self) -> MemoryObjectReceiveStream[T_Item]:
        """
        Create a clone of this receive stream.

        Each clone can be closed separately. Only when all clones have been closed will the
        receiving end of the memory stream be considered closed by the sending ends.

        :return: the cloned stream

        """
        ...
    
    def close(self) -> None:
        """
        Close the stream.

        This works the exact same way as :meth:`aclose`, but is provided as a special case for the
        benefit of synchronous callbacks.

        """
        ...
    
    async def aclose(self) -> None:
        ...
    
    def statistics(self) -> MemoryObjectStreamStatistics:
        """
        Return statistics about the current state of this stream.

        .. versionadded:: 3.0
        """
        ...
    
    def __enter__(self) -> MemoryObjectReceiveStream[T_Item]:
        ...
    
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> None:
        ...
    


@dataclass(eq=False)
class MemoryObjectSendStream(Generic[T_Item], ObjectSendStream[T_Item]):
    _state: MemoryObjectStreamState[T_Item]
    _closed: bool = ...
    def __post_init__(self) -> None:
        ...
    
    def send_nowait(self, item: T_Item) -> DeprecatedAwaitable:
        """
        Send an item immediately if it can be done without waiting.

        :param item: the item to send
        :raises ~anyio.ClosedResourceError: if this send stream has been closed
        :raises ~anyio.BrokenResourceError: if the stream has been closed from the
            receiving end
        :raises ~anyio.WouldBlock: if the buffer is full and there are no tasks waiting
            to receive

        """
        ...
    
    async def send(self, item: T_Item) -> None:
        ...
    
    def clone(self) -> MemoryObjectSendStream[T_Item]:
        """
        Create a clone of this send stream.

        Each clone can be closed separately. Only when all clones have been closed will the
        sending end of the memory stream be considered closed by the receiving ends.

        :return: the cloned stream

        """
        ...
    
    def close(self) -> None:
        """
        Close the stream.

        This works the exact same way as :meth:`aclose`, but is provided as a special case for the
        benefit of synchronous callbacks.

        """
        ...
    
    async def aclose(self) -> None:
        ...
    
    def statistics(self) -> MemoryObjectStreamStatistics:
        """
        Return statistics about the current state of this stream.

        .. versionadded:: 3.0
        """
        ...
    
    def __enter__(self) -> MemoryObjectSendStream[T_Item]:
        ...
    
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> None:
        ...
    


