"""
This type stub file was generated by pyright.
"""

import dataclasses
import inspect
import anyio
from contextlib import contextmanager
from copy import deepcopy
from typing import Any, Callable, Coroutine, Dict, ForwardRef, List, Mapping, Optional, Sequence, Tuple, Type, Union, cast
from fastapi import params
from fastapi.concurrency import AsyncExitStack, asynccontextmanager, contextmanager_in_threadpool
from fastapi.dependencies.models import Dependant, SecurityRequirement
from fastapi.logger import logger
from fastapi.security.base import SecurityBase
from fastapi.security.oauth2 import OAuth2, SecurityScopes
from fastapi.security.open_id_connect_url import OpenIdConnect
from fastapi.utils import create_response_field, get_path_param_names
from pydantic import BaseModel, create_model
from pydantic.error_wrappers import ErrorWrapper
from pydantic.errors import MissingError
from pydantic.fields import FieldInfo, ModelField, Required, SHAPE_FROZENSET, SHAPE_LIST, SHAPE_SEQUENCE, SHAPE_SET, SHAPE_SINGLETON, SHAPE_TUPLE, SHAPE_TUPLE_ELLIPSIS, Undefined
from pydantic.schema import get_annotation_from_field_info
from pydantic.typing import evaluate_forwardref
from pydantic.utils import lenient_issubclass
from starlette.background import BackgroundTasks
from starlette.concurrency import run_in_threadpool
from starlette.datastructures import FormData, Headers, QueryParams, UploadFile
from starlette.requests import HTTPConnection, Request
from starlette.responses import Response
from starlette.websockets import WebSocket

sequence_shapes = ...
sequence_types = ...
sequence_shape_to_type = ...
multipart_not_installed_error = ...
multipart_incorrect_install_error = ...
def check_file_field(field: ModelField) -> None:
    ...

def get_param_sub_dependant(*, param: inspect.Parameter, path: str, security_scopes: Optional[List[str]] = ...) -> Dependant:
    ...

def get_parameterless_sub_dependant(*, depends: params.Depends, path: str) -> Dependant:
    ...

def get_sub_dependant(*, depends: params.Depends, dependency: Callable[..., Any], path: str, name: Optional[str] = ..., security_scopes: Optional[List[str]] = ...) -> Dependant:
    ...

CacheKey = Tuple[Optional[Callable[..., Any]], Tuple[str, ...]]
def get_flat_dependant(dependant: Dependant, *, skip_repeats: bool = ..., visited: Optional[List[CacheKey]] = ...) -> Dependant:
    ...

def get_flat_params(dependant: Dependant) -> List[ModelField]:
    ...

def is_scalar_field(field: ModelField) -> bool:
    ...

def is_scalar_sequence_field(field: ModelField) -> bool:
    ...

def get_typed_signature(call: Callable[..., Any]) -> inspect.Signature:
    ...

def get_typed_annotation(param: inspect.Parameter, globalns: Dict[str, Any]) -> Any:
    ...

def get_dependant(*, path: str, call: Callable[..., Any], name: Optional[str] = ..., security_scopes: Optional[List[str]] = ..., use_cache: bool = ...) -> Dependant:
    ...

def add_non_field_param_to_dependency(*, param: inspect.Parameter, dependant: Dependant) -> Optional[bool]:
    ...

def get_param_field(*, param: inspect.Parameter, param_name: str, default_field_info: Type[params.Param] = ..., force_type: Optional[params.ParamTypes] = ..., ignore_default: bool = ...) -> ModelField:
    ...

def add_param_to_fields(*, field: ModelField, dependant: Dependant) -> None:
    ...

def is_coroutine_callable(call: Callable[..., Any]) -> bool:
    ...

def is_async_gen_callable(call: Callable[..., Any]) -> bool:
    ...

def is_gen_callable(call: Callable[..., Any]) -> bool:
    ...

async def solve_generator(*, call: Callable[..., Any], stack: AsyncExitStack, sub_values: Dict[str, Any]) -> Any:
    ...

async def solve_dependencies(*, request: Union[Request, WebSocket], dependant: Dependant, body: Optional[Union[Dict[str, Any], FormData]] = ..., background_tasks: Optional[BackgroundTasks] = ..., response: Optional[Response] = ..., dependency_overrides_provider: Optional[Any] = ..., dependency_cache: Optional[Dict[Tuple[Callable[..., Any], Tuple[str]], Any]] = ...) -> Tuple[Dict[str, Any], List[ErrorWrapper], Optional[BackgroundTasks], Response, Dict[Tuple[Callable[..., Any], Tuple[str]], Any],]:
    ...

def request_params_to_args(required_params: Sequence[ModelField], received_params: Union[Mapping[str, Any], QueryParams, Headers]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:
    ...

async def request_body_to_args(required_params: List[ModelField], received_body: Optional[Union[Dict[str, Any], FormData]]) -> Tuple[Dict[str, Any], List[ErrorWrapper]]:
    ...

def get_missing_field_error(loc: Tuple[str, ...]) -> ErrorWrapper:
    ...

def get_body_field(*, dependant: Dependant, name: str) -> Optional[ModelField]:
    ...

