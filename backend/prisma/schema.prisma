generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Indicates the access level for a given RUT. In particular, it
// assignes a user a mod level by their RUT.
// If needed, this model can be updated to additionally hold
// information about the admin level.
model AccessLevel {
  user_rut   String   @id
  is_mod     Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// A concrete course in the DB
// Cached from SIDING or whatever other source
// In turn, these courses are cached in memory at startup
model Course {
  code                String              @id
  name                String
  // A name normalized to lowercase english letters and spaces only
  searchable_name     String
  credits             Int
  deps                String
  banner_equivs       String[]
  banner_inv_equivs   String[]
  canonical_equiv     String
  program             String
  school              String
  area                String?
  category            String?
  // Whether this course is classified as "Vigente" by catalogo UC
  is_relevant         Boolean
  // An heuristic indicating if this course is available to take
  // Derivated from historic availability for now
  // WARNING: This availability is not guaranteed!
  is_available        Boolean
  // An heuristic indicating if this course is avilable to take in
  // these specific semesters
  // Derivated from historic availability for now
  // WARNING: The availability in these semesters is not guaranteed!
  semestrality_first  Boolean
  semestrality_second Boolean
  equivs              EquivalenceCourse[]
}

// An equivalence.
// The courses of the equivalence are stored relationally.
model Equivalence {
  code           String              @id
  name           String
  is_homogeneous Boolean
  is_unessential Boolean
  courses        EquivalenceCourse[]
}

// A relationship between an equivalence and a course.
model EquivalenceCourse {
  index       Int
  equiv       Equivalence @relation(fields: [equiv_code], references: [code])
  equiv_code  String
  course      Course      @relation(fields: [course_code], references: [code])
  course_code String

  @@id([equiv_code, course_code])
}

// An available major for a certain cyear.
// Majors are duplicated once for each cyear!
model Major {
  // C2013, C2020, C2022, etc...
  cyear   String
  code    String
  name    String
  // Vs.01, Vs.02, etc...
  version String

  @@id([cyear, code])
}

// An available minor for a certain cyear.
// Minors are duplicated once for each cyear!
model Minor {
  // C2013, C2020, C2022, etc...
  cyear      String
  code       String
  name       String
  // Vs.01, Vs.02, etc...
  version    String
  // "Amplitud", "Profundidad"
  minor_type String

  @@id([cyear, code])
}

// Indicates that for the given cyear and major, the given minor is available.
model MajorMinor {
  cyear String
  major String
  minor String

  @@id([cyear, major, minor])
}

// An available title for a certain cyear.
// Titles are duplicated once for each cyear!
model Title {
  // C2013, C2020, C2022, etc...
  cyear      String
  code       String
  name       String
  // Vs.01, Vs.02, etc...
  version    String
  // "CIVIL", "INDUSTRIAL"
  title_type String

  @@id([cyear, code])
}

// A stored plan, saved by a student.
model Plan {
  id               String   @id @default(cuid())
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  name             String
  is_favorite      Boolean  @default(false)
  user_rut         String
  validatable_plan String
}

// Store static data such as curriculums and coursedata in packed form (a huge JSON).
model PackedData {
  id   String @id
  data String
}
